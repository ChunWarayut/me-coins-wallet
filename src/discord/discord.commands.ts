/* eslint-disable @typescript-eslint/no-unsafe-assignment */
import { Injectable } from '@nestjs/common';
import {
  Context,
  Options,
  SlashCommand,
  SlashCommandContext,
  Button,
  ButtonContext,
  StringSelect,
  StringSelectContext,
} from 'necord';
import { PrismaService } from '../prisma/prisma.service';
import { UserRole, TransactionType, TransactionStatus } from '@prisma/client';
import { RegisterDto } from './dto/register.dto';
import { DonateDto } from './dto/donate.dto';
import * as bcrypt from 'bcrypt';
import {
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  EmbedBuilder,
  GuildMember,
  ChannelType,
  StringSelectMenuBuilder,
  StringSelectMenuOptionBuilder,
} from 'discord.js';

const ITEMS_PER_PAGE = 9;

@Injectable()
export class DiscordCommands {
  constructor(private prisma: PrismaService) {}

  @SlashCommand({
    name: 'register',
    description: '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Discord ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
  })
  public async onRegister(
    @Context() [interaction]: SlashCommandContext,
    @Options() options: RegisterDto,
  ) {
    const existingUser = await this.prisma.user.findUnique({
      where: { discordId: interaction.user.id },
    });
    const hashedPassword = await bcrypt.hash(options.password, 10);

    if (existingUser) {
      await this.prisma.user.update({
        where: { discordId: interaction.user.id },
        data: {
          username: options.username,
          password: hashedPassword,
        },
      });
      return interaction.reply({
        content: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Discord ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!',
        ephemeral: true,
      });
    }

    // Generate unique account number
    let accountNumber = Math.floor(
      1000000000 + Math.random() * 9000000000,
    ).toString();
    let isUnique = false;

    while (!isUnique) {
      const existingAccount = await this.prisma.user.findFirst({
        where: {
          accountNumber,
        },
      });
      if (!existingAccount) {
        isUnique = true;
      } else {
        accountNumber = Math.floor(
          1000000000 + Math.random() * 9000000000,
        ).toString();
      }
    }
    await this.prisma.user.create({
      data: {
        discordId: interaction.user.id,
        username: options.username,
        email: `${interaction.user.id}@discord.com`,
        password: hashedPassword,
        avatar: interaction.user.avatarURL() || '',
        role: UserRole.NORMAL,
        accountNumber,
        wallet: {
          create: {
            balance: 0,
          },
        },
      },
    });

    return interaction.reply({
      content: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Discord ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß!',
      ephemeral: true,
    });
  }

  @SlashCommand({
    name: 'balance',
    description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
  })
  public async onBalance(@Context() [interaction]: SlashCommandContext) {
    const user = await this.prisma.user.findUnique({
      where: { discordId: interaction.user.id },
      include: { wallet: true },
    });

    if (!user) {
      return interaction.reply({
        content: '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Discord ‡∏Å‡πà‡∏≠‡∏ô!',
        ephemeral: true,
      });
    }

    if (!user.wallet) {
      return interaction.reply({
        content: '‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏á‡∏¥‡∏ô!',
        ephemeral: true,
      });
    }

    const wallet = user.wallet as { balance: number };
    return interaction.reply({
      content: `‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: ${wallet.balance} coins`,
      ephemeral: true,
    });
  }

  @SlashCommand({
    name: 'gifts',
    description: '‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
  })
  public async onGifts(@Context() [interaction]: SlashCommandContext) {
    const member = interaction.member as GuildMember;
    const voiceChannel = member?.voice?.channel;

    if (!voiceChannel || voiceChannel.type !== ChannelType.GuildStageVoice) {
      return interaction.reply({
        content: '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á Voice Stage ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô',
        ephemeral: true,
      });
    }

    const giftsPage = await this.generateGiftsPage(1);

    return interaction.reply({
      ...giftsPage,
      ephemeral: true,
    });
  }

  private async generateGiftsPage(page: number) {
    const items = await this.prisma.item.findMany({
      orderBy: { price: 'asc' },
    });

    const totalPages = Math.ceil(items.length / ITEMS_PER_PAGE);
    const currentPage = Math.max(1, Math.min(page, totalPages));
    const start = (currentPage - 1) * ITEMS_PER_PAGE;
    const end = start + ITEMS_PER_PAGE;
    const pageItems = items.slice(start, end);

    const embed = new EmbedBuilder()
      .setTitle('üéÅ ‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö')
      .setDescription(
        '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á Stage Voice! üéÅ\n‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤',
      )
      .setColor(0x5865f2)
      .setTimestamp()
      .setFooter({ text: `‡∏´‡∏ô‡πâ‡∏≤ ${currentPage} ‡∏à‡∏≤‡∏Å ${totalPages}` });

    if (pageItems.length > 0) {
      pageItems.forEach((item) => {
        embed.addFields({
          name: `${item.imageUrl} ${item.name}`,
          value: `**‡∏£‡∏≤‡∏Ñ‡∏≤:** ${item.price} coins`,
          inline: true,
        });
      });
    } else {
      embed.setDescription('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
    }

    const rows: ActionRowBuilder<ButtonBuilder | StringSelectMenuBuilder>[] =
      [];
    for (let i = 0; i < pageItems.length; i += 3) {
      const row = new ActionRowBuilder<ButtonBuilder>();
      const rowItems = pageItems.slice(i, i + 3);
      rowItems.forEach((item) => {
        const button = new ButtonBuilder()
          .setCustomId(`donate_${item.id}`)
          .setLabel(`${item.name}`)
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(item.imageUrl as string);
        row.addComponents(button);
      });
      rows.push(row);
    }

    if (totalPages > 1) {
      const pageOptions = Array.from({ length: totalPages }, (_, i) => {
        const pageNum = i + 1;
        return new StringSelectMenuOptionBuilder()
          .setLabel(`‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ ${pageNum}`)
          .setValue(`gifts_page_${pageNum}`)
          .setEmoji(pageNum === currentPage ? 'üìç' : 'üìÑ')
          .setDefault(pageNum === currentPage);
      });

      const selectMenu = new StringSelectMenuBuilder()
        .setCustomId('gifts_page_select')
        .setPlaceholder('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç')
        .addOptions(pageOptions);

      const paginationRow =
        new ActionRowBuilder<StringSelectMenuBuilder>().addComponents(
          selectMenu,
        );
      rows.push(paginationRow);
    }

    return {
      embeds: [embed],
      components: rows,
    };
  }

  @StringSelect('gifts_page_select')
  public async onGiftsPageSelect(
    @Context() [interaction]: StringSelectContext,
  ) {
    const selectedValue = interaction.values[0];
    const newPage = parseInt(selectedValue.replace('gifts_page_', ''), 10);

    if (isNaN(newPage)) {
      return interaction.update({
        content: '‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        embeds: [],
        components: [],
      });
    }

    const giftsPage = await this.generateGiftsPage(newPage);

    return interaction.update(giftsPage);
  }

  @Button('donate_:customId')
  public async onDonateButton(@Context() [interaction]: ButtonContext) {
    // Extract item ID from the button's custom ID
    const customId = interaction.customId;

    // Check if this is a donate button and extract item ID
    if (!customId.startsWith('donate_')) {
      return;
    }

    const itemId = customId.replace('donate_', '');

    if (!itemId) {
      return interaction.reply({
        content: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å',
        ephemeral: true,
      });
    }

    // Check if user is in a voice channel
    const member = interaction.member;
    if (!member || !('voice' in member) || !member.voice.channel) {
      return interaction.reply({
        content: '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÇ‡∏î‡πÄ‡∏ô‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç',
        ephemeral: true,
      });
    }

    const voiceChannel = member.voice.channel;

    // Check if it's a stage channel or has a speaker
    let recipientId: string | null = null;

    // For now, we'll use the channel owner as recipient
    // You can enhance this logic based on your specific requirements
    if (voiceChannel.guild) {
      // Get the channel owner or first person in the channel
      const channelMembers = voiceChannel.members;
      if (channelMembers.size > 0) {
        // Get the first member in the channel (you might want to implement more sophisticated logic)
        recipientId = channelMembers.first()?.id || null;
      }
    }

    if (!recipientId) {
      return interaction.reply({
        content: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ô‡∏µ‡πâ',
        ephemeral: true,
      });
    }

    // Get the sender's user and wallet
    const sender = await this.prisma.user.findUnique({
      where: { discordId: interaction.user.id },
      include: { wallet: true },
    });

    if (!sender || !sender.wallet) {
      return interaction.reply({
        content: '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô',
        ephemeral: true,
      });
    }

    // Get the recipient's user
    const recipient = await this.prisma.user.findUnique({
      where: { discordId: recipientId },
    });

    if (!recipient) {
      return interaction.reply({
        content: '‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
        ephemeral: true,
      });
    }

    // Get the item
    const item = await this.prisma.item.findUnique({
      where: { id: itemId },
    });

    if (!item) {
      return interaction.reply({
        content: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å',
        ephemeral: true,
      });
    }

    // Check if sender has enough balance
    if (sender.wallet.balance < item.price) {
      return interaction.reply({
        content: `‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ${item.price} coins ‡πÅ‡∏ï‡πà‡∏°‡∏µ ${sender.wallet.balance} coins`,
        ephemeral: true,
      });
    }

    // Create the gift transaction
    try {
      await this.prisma.$transaction(async (prisma) => {
        // Create owned item for recipient
        const ownedItem = await prisma.ownedItem.create({
          data: {
            userId: recipient.id,
            itemId: item.id,
            isGifted: true,
          },
        });

        // Create gift record
        const gift = await prisma.gift.create({
          data: {
            senderId: sender.id,
            recipientId: recipient.id,
            ownedItemId: ownedItem.id,
          },
        });

        // Create transaction record for sender
        await prisma.transaction.create({
          data: {
            amount: -item.price,
            type: TransactionType.GIFT,
            status: TransactionStatus.COMPLETED,
            userId: sender.id,
            walletId: sender.wallet!.id,
            giftId: gift.id,
          },
        });

        // Update sender's balance
        await prisma.wallet.update({
          where: { id: sender.wallet!.id },
          data: { balance: sender.wallet!.balance - item.price },
        });
      });

      const successEmbed = new EmbedBuilder()
        .setTitle('üéÅ ‡πÇ‡∏î‡πÄ‡∏ô‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!')
        .setDescription(
          `**${sender.username}** ‡πÑ‡∏î‡πâ‡∏°‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö **<@${recipientId}>**`,
        )
        .setColor(0x57f287) // Green
        .setAuthor({
          name: `From: ${interaction.user.username}`,
          iconURL: interaction.user.displayAvatarURL(),
        })
        .addFields(
          {
            name: '‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á',
            value: `${item.imageUrl} ${item.name}`,
            inline: true,
          },
          { name: '‡∏£‡∏≤‡∏Ñ‡∏≤', value: `üí∞ ${item.price} coins`, inline: true },
        )
        // .setThumbnail(item.imageUrl)
        .setTimestamp()
        .setFooter({
          text: `Me-Coins Wallet | ID: ${interaction.id}`,
          iconURL: interaction.client.user?.displayAvatarURL(),
        });

      return interaction.reply({
        embeds: [successEmbed],
        ephemeral: false,
      });
    } catch (error) {
      console.error('Error creating gift:', error);
      return interaction.reply({
        content: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡πÄ‡∏ô‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç',
        ephemeral: true,
      });
    }
  }

  @SlashCommand({
    name: 'donate',
    description: '‡πÇ‡∏î‡πÄ‡∏ô‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏û‡∏π‡∏î',
  })
  public async onDonate(
    @Context() [interaction]: SlashCommandContext,
    @Options() options: DonateDto,
  ) {
    const member = interaction.member as GuildMember;
    const voiceChannel = member?.voice?.channel;

    if (!voiceChannel || voiceChannel.type !== ChannelType.GuildStageVoice) {
      return interaction.reply({
        content: '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á Voice Stage ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô',
        ephemeral: true,
      });
    }

    // Check if it's a stage channel or has a speaker
    let recipientId: string | null = null;

    // For now, we'll use the channel owner as recipient
    // You can enhance this logic based on your specific requirements
    if (voiceChannel.guild) {
      // Get the channel owner or first person in the channel
      const channelMembers = voiceChannel.members;
      if (channelMembers.size > 0) {
        // Get the first member in the channel (you might want to implement more sophisticated logic)
        recipientId = channelMembers.first()?.id || null;
      }
    }

    if (!recipientId) {
      return interaction.reply({
        content: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ô‡∏µ‡πâ',
        ephemeral: true,
      });
    }

    // Get the sender's user and wallet
    const sender = await this.prisma.user.findUnique({
      where: { discordId: interaction.user.id },
      include: { wallet: true },
    });

    if (!sender || !sender.wallet) {
      return interaction.reply({
        content: '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô',
        ephemeral: true,
      });
    }

    // Get the recipient's user
    const recipient = await this.prisma.user.findUnique({
      where: { discordId: recipientId },
    });

    if (!recipient) {
      return interaction.reply({
        content: '‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
        ephemeral: true,
      });
    }

    // Get the item
    const item = await this.prisma.item.findUnique({
      where: { id: options.itemId },
    });

    if (!item) {
      return interaction.reply({
        content: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å',
        ephemeral: true,
      });
    }

    // Check if sender has enough balance
    if (sender.wallet.balance < item.price) {
      return interaction.reply({
        content: `‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ${item.price} coins ‡πÅ‡∏ï‡πà‡∏°‡∏µ ${sender.wallet.balance} coins`,
        ephemeral: true,
      });
    }

    // Create the gift transaction
    try {
      await this.prisma.$transaction(async (prisma) => {
        // Create owned item for recipient
        const ownedItem = await prisma.ownedItem.create({
          data: {
            userId: recipient.id,
            itemId: item.id,
            isGifted: true,
          },
        });

        // Create gift record
        const gift = await prisma.gift.create({
          data: {
            senderId: sender.id,
            recipientId: recipient.id,
            ownedItemId: ownedItem.id,
          },
        });

        // Create transaction record for sender
        await prisma.transaction.create({
          data: {
            amount: -item.price,
            type: TransactionType.GIFT,
            status: TransactionStatus.COMPLETED,
            userId: sender.id,
            walletId: sender.wallet!.id,
            giftId: gift.id,
          },
        });

        // Update sender's balance
        await prisma.wallet.update({
          where: { id: sender.wallet!.id },
          data: { balance: sender.wallet!.balance - item.price },
        });
      });

      const successEmbed = new EmbedBuilder()
        .setTitle('üéÅ ‡πÇ‡∏î‡πÄ‡∏ô‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!')
        .setDescription(
          `**${sender.username}** ‡πÑ‡∏î‡πâ‡∏°‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö **<@${recipientId}>**`,
        )
        .setColor(0x57f287) // Green
        .setAuthor({
          name: `From: ${interaction.user.username}`,
          iconURL: interaction.user.displayAvatarURL(),
        })
        .addFields(
          {
            name: '‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á',
            value: `${item.imageUrl} ${item.name}`,
            inline: true,
          },
          { name: '‡∏£‡∏≤‡∏Ñ‡∏≤', value: `üí∞ ${item.price} coins`, inline: true },
        )
        .setThumbnail(item.imageUrl)
        .setTimestamp()
        .setFooter({
          text: `Me-Coins Wallet | ID: ${interaction.id}`,
          iconURL: interaction.client.user?.displayAvatarURL(),
        });

      return interaction.reply({
        embeds: [successEmbed],
        ephemeral: false,
      });
    } catch (error) {
      console.error('Error creating gift:', error);
      return interaction.reply({
        content: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡πÄ‡∏ô‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç',
        ephemeral: true,
      });
    }
  }

  @SlashCommand({
    name: 'my-gifts',
    description: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö',
  })
  public async onMyGifts(@Context() [interaction]: SlashCommandContext) {
    const user = await this.prisma.user.findUnique({
      where: { discordId: interaction.user.id },
    });

    if (!user) {
      return interaction.reply({
        content: '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ',
        ephemeral: true,
      });
    }

    const ownedGifts = await this.prisma.ownedItem.findMany({
      where: {
        userId: user.id,
        isGifted: true,
      },
      include: {
        item: true,
        gifts: {
          include: {
            sender: true,
          },
        },
      },
      orderBy: {
        createdAt: 'desc',
      },
    });

    if (ownedGifts.length === 0) {
      return interaction.reply({
        content: '‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡πÉ‡∏î‡πÜ ‡πÄ‡∏•‡∏¢ üéÅ',
        ephemeral: true,
      });
    }

    const embed = new EmbedBuilder()
      .setTitle('üéÅ ‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô')
      .setDescription(
        `‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà <@${interaction.user.id}> ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö`,
      )
      .setColor(0x5865f2)
      .setAuthor({
        name: interaction.user.username,
        iconURL: interaction.user.displayAvatarURL(),
      });

    ownedGifts.forEach((ownedItem) => {
      // Assuming one gift per owned item for simplicity
      const gift = ownedItem.gifts[0];
      const sender = gift?.sender;
      const senderUsername = sender ? sender.username : '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á';
      embed.addFields({
        name: `${ownedItem.item.imageUrl} ${ownedItem.item.name}`,
        value: `‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å: **${senderUsername}**\n‡πÄ‡∏°‡∏∑‡πà‡∏≠: <t:${Math.floor(
          ownedItem.createdAt.getTime() / 1000,
        )}:R>`,
        inline: false,
      });
    });

    return interaction.reply({
      embeds: [embed],
      ephemeral: true,
    });
  }

  @SlashCommand({
    name: 'my-inventory',
    description: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÉ‡∏ô‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏≠‡∏á',
  })
  public async onMyInventory(@Context() [interaction]: SlashCommandContext) {
    const user = await this.prisma.user.findUnique({
      where: { discordId: interaction.user.id },
    });

    if (!user) {
      return interaction.reply({
        content: '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ',
        ephemeral: true,
      });
    }

    const ownedItems = await this.prisma.ownedItem.findMany({
      where: {
        userId: user.id,
      },
      include: {
        item: true,
      },
      orderBy: {
        createdAt: 'desc',
      },
    });

    if (ownedItems.length === 0) {
      return interaction.reply({
        content: '‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÉ‡∏î‡πÜ ‡πÉ‡∏ô‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏≠‡∏á üéí',
        ephemeral: true,
      });
    }

    const itemCounts = ownedItems.reduce(
      (acc, { item }) => {
        acc[item.id] = acc[item.id] || { ...item, count: 0 };
        acc[item.id].count++;
        return acc;
      },
      {} as Record<
        string,
        {
          id: string;
          name: string;
          description: string | null;
          imageUrl: string;
          price: number;
          count: number;
        }
      >,
    );

    const embed = new EmbedBuilder()
      .setTitle('üéí ‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô')
      .setDescription(
        `‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà <@${interaction.user.id}> ‡∏°‡∏µ‡πÉ‡∏ô‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏≠‡∏á`,
      )
      .setColor(0x5865f2)
      .setAuthor({
        name: interaction.user.username,
        iconURL: interaction.user.displayAvatarURL(),
      });

    Object.values(itemCounts).forEach((item) => {
      embed.addFields({
        name: `${item.imageUrl} ${item.name}`,
        value: `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: **${item.count}** ‡∏ä‡∏¥‡πâ‡∏ô`,
        inline: true,
      });
    });

    return interaction.reply({
      embeds: [embed],
      ephemeral: true,
    });
  }
}
